Задание 1.3: Реализуйте функцию токенизатора: Это основная часть данного этапа.
Сигнатура: t_token *tokenize(const char *input_line);
Логика:
Инициализируем пустой связный список (head = NULL).
Итерация по символам входной_строки.
Пропускаем пробелы: Игнорировать пробелы и табуляции между токенами.
Идентифицировать операторы: Проверьте наличие |, <, >. Если вы видите >,
проверьте, не является ли следующий символ также > (для >>).
То же самое для < и <<. Создайте соответствующий токен (TOKEN_PIPE, TOKEN_REDIR_IN и т. д.),
выделите память для его значения (например, strdup(«|»))
и добавьте его в свой связанный список. Продвиньте свою позицию в input_line.
Определите слова: Если это не пробельные символы или известный оператор, считайте, что это начало слова.
Читайте символы до тех пор, пока не встретите пробел,
оператор, кавычки или конец строки. Осторожно обращайтесь с кавычками (' и «):
читайте все до подходящей закрывающей кавычки как одно слово, соблюдая правила
расширения переменных только внутри двойных кавычек. Выделите память для слова,
сохраните его в token->value, установите тип в TOKEN_WORD и добавьте в список.
Обработка ошибок: Проверьте, нет ли незакрытых кавычек. Если они найдены,
может быть возвращен специальный токен ошибки или NULL.
Верните голову созданного связанного списка лексем.
Этап 2: Парсинг -> Построение AST (дерева) из списка токенов (опционально / более продвинуто)

Задача 2.1: Определите структуру (структуры) узлов AST: Если вы выбрали подход AST,
определите структуры для различных типов узлов
(например, CommandNode, PipeNode, RedirNode). Эти узлы будут содержать данные (например, аргументы команд)
и указатели на дочерние узлы. Это сложнее, чем структура токенов.
Задача 2.2: Реализовать функцию парсера:
Сигнатура: t_ast_node *parse(t_token *token_list);
Логика: Принимает связанный список токенов из фазы 1.
Потребляет токены в соответствии с определенными вами правилами грамматики
(например, «команда - это слово, за которым следуют аргументы»,
«трубопровод - это команда, за которой следует токен pipe, за
которым следует другая команда/трубопровод»). Он рекурсивно строит древовидную структуру (AST),
представляющую команду. Это серьезная задача,
 требующая применения методов синтаксического анализа.
Рекомендация:

Сначала полностью сосредоточьтесь на фазе 1. Приобретите надежный токенизатор,
который создает точный связанный список лексем,
правильно обрабатывая слова, операторы и особенно кавычки.
Как только вы добьетесь идеальной работы, вы сможете решить,
как обрабатывать этот список лексем - строить полный AST (фаза 2)
или использовать более простую промежуточную структуру для подготовки к выполнению.
Попытка построить дерево непосредственно во время токенизации,
скорее всего, приведет к путанице и ненужным сложностям.

Переведено с помощью DeepL.com (бесплатная версия)
